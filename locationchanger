#!/bin/bash

# automatically change configuration of Mac OS X based on location
# author: Rocco Georgi <rocco@pavingways.com>
# version: 0.4.0

# original author: Onne Gorter <o.gorter@gmail.com>
# url: http://tech.inhelsinki.nl/locationchanger/
# version: 0.4

# redirect all IO to a logfile
mkdir -p /usr/local/var/log
exec &>/usr/local/var/log/locationchanger.log

# to avoid any output, any logfile, uncomment the following:
#exec 1>/dev/null 2>/dev/null

# this service is called immediately after network activity.
# sleep a bit to make sure that info is finished writing to disk about those network changes
sleep 2

# determine location of this script
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# get SSID
SSID=`networksetup -getairportnetwork en0 | awk -F ': ' '{print $2}'`
echo `date` "New SSID found: $SSID"


# empty location var
LOCATION=

# LOCATIONS
# (use to be used Location name here)
# =============================================
Location_Automatic="Automatic"
Location_Home="Home"
Location_Work="Company Intranet"

# SSIDS
# =====
SSID_TelekomPublic=Telekom
SSID_Home=HomeSSID
SSID_Work=WorkSSID

# empty location var
DNS=


# LOCATIONS
# (use to be used Location name here)
# =============================================
Location_Automatic="Automatic"
Location_Home="Home"
Location_Work="Company Intranet"

# SSID -> LOCATION mapping
case $SSID in
	$SSID_TelekomPublic ) LOCATION="$Location_Automatic";;
	$SSID_Home          ) LOCATION="$Location_Home";;
	$SSID_Work  ) LOCATION="$Location_Work";;
	# ... add more here
esac
REASON="SSID changed to $SSID"

MAP_FILE=$SCRIPT_DIR/locationchanger.conf
if [ -f "$MAP_FILE" ]; then
    echo "Checking mappings from file $MAP_FILE"
    while IFS= read -r line || [ -n "$line" ]; do
        # Ignore comments and empty lines
        if [[ "$line" =~ ^#.* ]] || [ -z "$line" ]; then
            continue
        fi

        # Extract fields using regular expression to handle quoted strings
        loc=$(echo "$line" | awk '{print $1}')
        wifi=$(echo "$line" | awk -F'"' '{print $2}')
        dns=$(echo "$line" | awk -F'"' '{print $4}')

        echo "Location: $loc, WiFi: $wifi, DNS: $dns"

        if [[ "$wifi" == "$SSID" ]]; then
            LOCATION="$loc"
            DNS_SETTING="$dns"
            REASON="Info : SSID changed to $SSID using mapping file"
            break
        fi
    done < "$MAP_FILE"
fi

# still didn't get a location -> use Location_Automatic
if [ -z "$LOCATION" ]; then
	LOCATION="$Location_Automatic"
	REASON="Automatic Fallback"
	sudo networksetup -setdnsservers "Wi-Fi" "Empty" >/dev/null 2>&1
fi

# Don't change if DNS already there
#current_location=$(networksetup -getcurrentlocation)
#if [ "$current_location" = "$LOCATION" ]; then
#    exit
#fi

# Don't change if we're already there
# Check if both the current location and DNS are the same as the desired ones
if [ "$current_location" = "$LOCATION" ] && [ "$current_dns" = "$dns" ]; then
    echo "Info: Both location and DNS are already set correctly. No need to change."
    exit 1
fi

if [ "$current_location" != "$LOCATION" ]; then
    echo "Info: Updating network location to $LOCATION..."
	osascript -e "display notification \"Succeeded to Change Network Location to: $LOCATION\" with title \"Network Update Succes\""
    networksetup -switchtolocation "$LOCATION" >/dev/null 2>&1
else
    echo "Error: Unable to update network location to $LOCATION..."
	osascript -e "display notification \"Failed to Change Network Location to: $LOCATION\" with title \"Network Update Failure\""
fi

# Check if the DNS value is empty
if [ -z "$dns" ] || [ "$dns" == "\"\"" ];  then
	echo "Info: DNS from Config empty."
	sudo networksetup -setdnsservers "Wi-Fi" "Empty" >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo "Info: DNS variable is empty, DNS servers have been cleared."
		osascript -e "display notification \"Successfully cleared DNS\" with title \"DNS Update Success\""
	else
		echo "Error: Failed to clear DNS."
		osascript -e "display notification \"Failed to clear DNS\" with title \"DNS Update Failure\""
	fi
else
	# If the DNS value is not empty, set the DNS to the specified value
	echo "Info: DNS from Config defined."
	sudo networksetup -setdnsservers "Wi-Fi" "$dns" >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo "Info: DNS updated to \"$dns\"."
		osascript -e "display notification \"Successfully updated DNS to: $dns\" with title \"DNS Update Success\""
	else
		echo "Error: Failed to update DNS to \"$dns\"."
		osascript -e "display notification \"Failed to update DNS to $dns\" with title \"DNS Update Failure\""
	fi
fi
echo "" # add linefeed after output from networksetup

# if present, callout to an external script
# use this script's dir and also a file-naming convention to determine if there is an external script to be run
EXTERNAL_CALLOUT="$SCRIPT_DIR/locationchanger.callout.sh"
if [[ -x "$EXTERNAL_CALLOUT" ]]; then
		echo "Calling external executable \"$EXTERNAL_CALLOUT\""
		output=$($EXTERNAL_CALLOUT "$LOCATION")
		exit_code=$?
		echo "exit code: $exit_code and output: $output"
fi

osascript -e "display notification \"Network Location Changed to $LOCATION\" with title \"Network Update\""

echo "--> Location Changer: $LOCATION - $REASON"

exit 0
